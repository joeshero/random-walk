name: Deploy with docker

on:
  push:
    # 分支
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: docker.io  # 默认为 docker.io，即去 Docker Hub 上找
  IMAGE_NAME: ${{ github.event.repository.name }}  # 使用 GitHub Actions 提供的能力，可以自动获取仓库名
  IMAGE_TAG: latest  # Docker Image 的 tag，为了方便我直接设置 latest
  PORT: 8888  # 服务要暴露的端口，可以改

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      # maven缓存，不加的话每次都会去重新拉取，会影响速度
      - name: Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # 编译打包
      - name: Build with Maven
        run: mvn package -Dmaven.test.skip=true
      # 登录Docker Hub
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # build 镜像并push到中央仓库中
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: random-work:latest
      # push后，用ssh连接服务器执行脚本
#      - name: SSH
#        uses: fifsky/ssh-action@master
#        with:
#          command: |
#            echo hello world
#          host: ${{ secrets.HOST }}
#          user: ${{ secrets.USER }}
#          key: ${{ secrets.PRIVATE_KEY}}
          # 连接到远程服务器
      - name: Connect to server
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}
      # 初始化 knownhosts
      - name: Setup knownhosts
        run: ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      # 触发服务器部署脚本
      - name: Trigger server deployment script
        run: |
          echo hello